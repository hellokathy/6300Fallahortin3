package edu.gatech.seclass.assignment3;

import static org.junit.Assert.*;

import org.junit.Test;

public class MyStringTest {
	private MyString testString = new MyString();
	//this tests for upper case vowels
	@Test
	public void testGetVowels1() {
		testString.setString("BULBASAUR");
		assertEquals("vowels should equal UAUA", "UAAU", testString.getVowels());
	}
	//this tests for lower case vowels
	@Test
	public void testGetVowels2() {
		testString.setString("bulbasaur");
		assertEquals("vowels should equal uaua", "uaau", testString.getVowels());
	}
	//this tests for a substring of 1 through 5 to ensure index is correct
	@Test
	public void testGetSubstring1() {
		testString.setString("shinochu");
		assertEquals("vowels should equal hino", "hino", testString.getSubstring(1, 5));
	}
	//this tests to see if an exception is thrown for invalid entries
	@Test(expected = StringIndexOutOfBoundsException.class)
	public void testGetSubstring2() {
		testString.setString("shinochu");
		assertEquals("this should invoke an exception", "hino", testString.getSubstring(1,0));
	}
	//simple test to insure the index is working
	@Test
	public void testIndexOf1() {
		testString.setString("charmander");
		assertEquals("this should return 3 since its the third char", 3, testString.indexOf('a'));
	}
	//tests for exception non existent chars
	@Test(expected = StringIndexOutOfBoundsException.class)
	public void testIndexOf2() {
		testString.setString("charmander");
		assertEquals("this should return -1 since it does not exist", -1, testString.indexOf('z'));
	}
	//tests for exception non existent chars
	@Test(expected = StringIndexOutOfBoundsException.class)
	public void testIndexOf2() {
		testString.setString("charmander");
		assertEquals("this should return 1 for first char", 1, testString.indexOf('c'));
	}
	//
	@Test
	public void testRemoveChar1() {
		fail("Not yet implemented");
	}
	//
	@Test
	public void testRemoveChar2() {
		fail("Not yet implemented");
	}
	//
	@Test
	public void testInvert1() {
		fail("Not yet implemented");
	}
	//
	@Test
	public void testInvert2() {
		fail("Not yet implemented");
	}
	
	
	
	
	//not required, and poor since it is dependent on another method
	@Test
	public void testSetString() {
		testString.setString("bulbasaur");
		
		assertEquals("should equal bulbasaur", "bulbasaur", testString.getString());
	}
	//not required, and poor since it is dependent on another method
	@Test
	public void testGetString() {
		testString.setString("bulbasaur");
		assertEquals("should still equal bulbasaur", "bulbasaur", testString.getString());
	}
}
