package edu.gatech.seclass.gradescalc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashSet;

import org.apache.poi.hslf.model.Sheet;
import org.apache.poi.hssf.extractor.ExcelExtractor;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class GradesDB {
	
	static String dbName;
	HashSet<Student> students;
	XSSFSheet sheetTeamGrades;
	XSSFSheet sheetSoloGrades;
	
	public GradesDB(String dbName) throws IOException{
		this.dbName = dbName;
		InputStream inp = new FileInputStream(this.dbName);
	    XSSFWorkbook wb = new XSSFWorkbook(inp);
	    
	    this.sheetSoloGrades = wb.getSheet("IndividualGrades"); //Student Assignments
	    this.sheetTeamGrades = wb.getSheet("TeamGrades");
	    
	    //loading student info
	    XSSFSheet sheetInfo = wb.getSheet("StudentsInfo"); //Student Info
	    for (int rowNum = 1; rowNum < sheetInfo.getLastRowNum(); rowNum++){
	    	Row r = sheetInfo.getRow(rowNum);
	    	this.students.add(new Student(
	    				r.getCell(0).getStringCellValue(), //name
	    				r.getCell(1).getStringCellValue() //gtID
	    				));
	    }
	}

	public int getNumStudents() {
		// TODO Auto-generated method stub
		return this.students.size();
	}

	public int getNumAssignments() {
		// TODO Auto-generated method stub
		return this.sheetSoloGrades.getDefaultColumnWidth();
	}

	public int getNumProjects() {
		// TODO Auto-generated method stub
		return 0;
	}

	public HashSet<Student> getStudents() {
		// TODO Auto-generated method stub
		return this.students;
	}

	public Student getStudentByName(String string) {
		for (Student s : students) {
            if (s.getName().compareTo(string) == 0) {
                return s;
            }
        }
		return null;
	}

	public Student getStudentByID(String string) {
		for (Student s : students) {
            if (s.getGtid().compareTo(string) == 0) {
                return s;
            }
        }
		return null;
	}
	
}
